# üßæ An√°lise T√©cnica ‚Äì Vers√£o 1 do Sistema Banc√°rio

## üìå Vis√£o Geral

Esta √© a **vers√£o inicial** de um sistema banc√°rio simples, implementado em Python e executado via terminal. A aplica√ß√£o permite realizar opera√ß√µes b√°sicas como:

- Dep√≥sito
- Saque (com controle de limites)
- Emiss√£o de extrato
- Encerramento da sess√£o

O c√≥digo foi desenvolvido com foco na pr√°tica de estruturas b√°sicas da linguagem e na simula√ß√£o de um fluxo banc√°rio realista, respeitando limites operacionais.

---

## ‚öôÔ∏è Funcionalidades Implementadas

| Fun√ß√£o    | Descri√ß√£o |
|-----------|-----------|
| `Dep√≥sito` | Permite inserir valores positivos na conta e registra a opera√ß√£o no extrato. |
| `Saque`    | Realiza saques com duas restri√ß√µes: at√© 3 saques di√°rios e limite de R$500 por saque. |
| `Extrato`  | Lista todas as opera√ß√µes realizadas e o saldo atual. |
| `Sair`     | Encerra a execu√ß√£o do sistema. |

---

## üß† Estruturas Utilizadas

- **Fun√ß√£o `main()`**: centraliza toda a l√≥gica da aplica√ß√£o.
- **Loop `while True`**: mant√©m o sistema ativo at√© que o usu√°rio decida encerrar.
- **Condicionais (`if/elif/else`)**: controlam o fluxo com base nas op√ß√µes do menu.
- **Tratamento de exce√ß√µes (`try/except`)**: garante robustez na convers√£o de entradas para `float`.
- **Listas**: utilizadas para armazenar o hist√≥rico de transa√ß√µes (`extrato`).
- **Constantes**: utilizadas para representar limites operacionais (`LIMITE_SAQUES`, `LIMITE_POR_SAQUE`).
- **Manipula√ß√£o de string**: adaptada para facilitar entrada de valores com v√≠rgula como separador decimal.

---

## ‚úÖ Boas Pr√°ticas Aplicadas

- C√≥digo encapsulado dentro de `main()` com a prote√ß√£o `if __name__ == "__main__"`.
- Valida√ß√£o robusta das entradas num√©ricas.
- Uso de constantes para facilitar ajustes futuros.
- Coment√°rios descritivos auxiliando na legibilidade do c√≥digo.
- Nomenclatura clara e sem ambiguidade.

---

## ‚ö†Ô∏è Pontos de Melhoria para Vers√µes Futuras

1. **Modulariza√ß√£o**:
   - Separar funcionalidades em fun√ß√µes distintas (`depositar()`, `sacar()`, `exibir_extrato()`), melhorando clareza e reutiliza√ß√£o.

2. **Abstra√ß√£o com POO**:
   - Introdu√ß√£o de classes como `ContaBancaria` e `Transacao`, promovendo encapsulamento e coes√£o.

3. **Persist√™ncia de dados**:
   - Armazenar saldo e extrato em arquivos ou banco de dados (ex: `JSON`, `SQLite`), garantindo continuidade entre sess√µes.

4. **Interface de usu√°rio**:
   - Adotar interface gr√°fica (ex: `Tkinter`, `PyQt`) ou vers√£o web futuramente.

5. **Internacionaliza√ß√£o e formata√ß√£o de moeda**:
   - Uso da biblioteca `locale` para adaptar valores monet√°rios ao formato brasileiro corretamente.

6. **Testes Automatizados**:
   - Implementa√ß√£o de testes unit√°rios com `unittest` ou `pytest`.

7. **Melhor tratamento de erros**:
   - Mensagens mais espec√≠ficas para diferentes falhas de entrada (ex: campo vazio, caracteres inv√°lidos).

---

## üìà Conclus√£o

A **vers√£o 1** cumpre com √™xito os objetivos iniciais de criar uma simula√ß√£o b√°sica de sistema banc√°rio. A aplica√ß√£o est√° funcional, leg√≠vel e organizada, servindo como alicerce para evolu√ß√µes futuras mais robustas e orientadas a boas pr√°ticas de engenharia de software.

